{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","hasError","errorInfo","this","setState","React","Component","CounterButton","updateCount","prevState","count","color","onClick","PureComponent","Header","nextProps","nextState","App","onRequestRobots","onSearchChange","searchField","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","resp","json","users","err","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.01ddd1ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className={\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"}>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt={\"robots\"}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {robots.map((robot, i) => {\n                return (<Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>)\n            })}\n        </div>\n    )\n};\n\nexport default CardList","import React from \"react\"\n\nexport const SearchBox = ({searchChange}) => {\n    return (\n        <div className={\"pa2\"}>\n            <input type=\"search\" placeholder={\"search robots\"} className={\"bg-lightest-blue pa3 ba\"} onChange={searchChange}/>\n        </div>\n    )\n};","import React from \"react\"\n\nexport const Scroll = (props) => {\n    return (\n        <div style={{overflowY: \"scroll\", border: \"3px solid black\", height: \"800px\"}}>\n            {props.children}\n        </div>\n    )\n};","import React from \"react\"\n\nexport class ErrorBoundry extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (<h1>Hoops! It's not good.</h1>)\n        } else {\n            return this.props.children\n        }\n    }\n}","import React from \"react\"\n\nclass CounterButton extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.state = {\n            count: 0\n        }\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     let propsUpdated = nextProps.color !== \"red\";\n    //     let stateUpdated = nextState.count !== this.state.count;\n    //     return propsUpdated || stateUpdated\n    // }\n\n    updateCount = () => {\n        this.setState((prevState)=>({count: prevState.count + 1}))\n    };\n\n    render() {\n        return(\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        )\n    }\n}\n\nexport default CounterButton;","import React from \"react\"\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends React.PureComponent {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className={\"f1\"}>Robofriends</h1>\n                <CounterButton color={\"red\"}/>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\"\nimport {connect} from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport {SearchBox} from \"../components/SearchBox\";\nimport \"./App.css\"\nimport {Scroll} from \"../components/Scroll\";\nimport {ErrorBoundry} from \"../components/ErrorBoundry\";\nimport {requestRobots, setSearchField} from \"../actions\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    render() {\n        const {robots, onSearchChange, searchField, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n        if (isPending) {\n            return <h1 className={\"tc\"}>Loading</h1>\n        } else {\n            return (\n                <div className={\"tc\"}>\n                    <Header/>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCHFIELD,\n        payload: text\n    }\n};\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(resp => {\n            return resp.json()\n        })\n        .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\n};","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import {CHANGE_SEARCHFIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: \"\"\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: \"\"\n};\n\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\nimport App from \"./containers/App\";\nimport {requestRobots, searchRobots} from \"./reducers\";\nimport {createLogger} from \"redux-logger/src\";\nimport thunkMiddleware from \"redux-thunk\"\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}